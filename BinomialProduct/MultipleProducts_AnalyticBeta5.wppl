
// SUBJECTIVE LOGIC and MCMC
// Multiple Products  (5)
// Simulating and comparing SL product and MC simulation (run at http://webppl.org/)

// Global parameters.
var W = 2
var alpha = Vector([1., 1., 1.])
var N_experiments = 100
var N_mc = 100000
var N_integrations = 1000

var logit = function(x){
  return Math.log( x / (1-x))
}

// Helper function for converting from opinions to beta pdfs and viceversa
var Opinion2BetaEvidence = function(opinion){
  if (opinion.u==0){ return 'error' }
  else{
    var r = opinion.b*W / opinion.u
    var s = opinion.d*W / opinion.u
    return {r:r,s:s,a:opinion.a}
  }
}  
  
var BetaEvidence2Opinion = function(belief){
  var b = belief.r / (W+belief.r+belief.s)
  var d = belief.s / (W+belief.r+belief.s)
  var u = W / (W+belief.r+belief.s)
  return {b:b,d:d,u:u,a:belief.a}
}

var BetaEvidence2Beta = function(belief){
  var alpha = belief.r + belief.a*W
  var beta = belief.s + (1-belief.a)*W
  return {alpha:alpha,beta:beta}
}

// Functions to compute products
var SL_product = function(o1,o2){
  var b = (o1.b * o2.b) +
    ((1-o1.a)*o2.a*o1.b*o2.u + (1-o2.a)*o1.a*o2.b*o1.u) /
    (1 - o1.a*o2.a)
  var d = o1.d + o2.d - o1.d*o2.d
  var u = o1.u*o2.u +
    ((1-o2.a)*o1.b*o2.u + (1-o1.a)*o2.b*o1.u) /
    (1 - o1.a*o2.a)
  var a = o1.a*o2.a
  return {b:b,d:d,u:u,a:a}
}

var MC_product = function(b1,b2,b3,b4,b5){
  var options = {method:'rejection', samples:N_mc}
  return Infer(options, function(){
    var x1 = Beta({a:b1.alpha,b:b1.beta})
    var x2 = Beta({a:b2.alpha,b:b2.beta})
    var x3 = Beta({a:b3.alpha,b:b3.beta})
    var x4 = Beta({a:b4.alpha,b:b4.beta})
    var x5 = Beta({a:b5.alpha,b:b5.beta})
    return sample(x1)*sample(x2)*sample(x3)*sample(x4)*sample(x5)
  })
}

var logit_MC_product = function(b1,b2,b3,b4,b5){
  var options = {method:'MCMC', samples:N_mc}
  return Infer(options, function(){
    var x1 = Beta({a:b1.alpha,b:b1.beta})
    var x2 = Beta({a:b2.alpha,b:b2.beta})
    var x3 = Beta({a:b3.alpha,b:b3.beta})
    var x4 = Beta({a:b4.alpha,b:b4.beta})
    var x5 = Beta({a:b5.alpha,b:b5.beta})
    var x1x2 = sample(x1)*sample(x2)*sample(x3)*sample(x4)*sample(x5)
    var y = logit(x1x2) 
    return y
  })
}

var product_Beta_mom = function(Bx,By){
  var meanBx = Bx.alpha / (Bx.alpha + Bx.beta)
  var meanBy = By.alpha / (By.alpha + By.beta)
  var varBx = (Bx.alpha * Bx.beta) / ((Bx.alpha + Bx.beta)*(Bx.alpha + Bx.beta)*(Bx.alpha + Bx.beta+1))
  var varBy = (By.alpha * By.beta) / ((By.alpha + By.beta)*(By.alpha + By.beta)*(By.alpha + By.beta+1))

  var meanBz = meanBx * meanBy
  var varBz = meanBx*meanBx*varBy + meanBy*meanBy*varBx + varBx*varBy

  var B_alpha = -(meanBz * (varBz + meanBz*meanBz - meanBz)) / (varBz)
  var B_beta = ((meanBz-1) * (varBz + meanBz*meanBz - meanBz)) / (varBz)
  
  return {alpha:B_alpha, beta:B_beta}
}

// Experimental loop
var iter_experiments = _.range(N_experiments)
var loop_experiments = function(i){

  // Parameters for initializing the opinions
  var vals1 = sample(Dirichlet({alpha:alpha})).data
  var vals2 = sample(Dirichlet({alpha:alpha})).data
  var vals3 = sample(Dirichlet({alpha:alpha})).data
  var vals4 = sample(Dirichlet({alpha:alpha})).data
  var vals5 = sample(Dirichlet({alpha:alpha})).data
  var a1 = sample(Uniform({a:0,b:1}))
  var a2 = sample(Uniform({a:0,b:1}))
  var a3 = sample(Uniform({a:0,b:1}))
  var a4 = sample(Uniform({a:0,b:1}))
  var a5 = sample(Uniform({a:0,b:1}))

  var Ox = {b:vals1[0], d:vals1[1], u:vals1[2], a:a1}
  var Oy = {b:vals2[0], d:vals2[1], u:vals2[2], a:a2}
  var O3 = {b:vals3[0], d:vals3[1], u:vals3[2], a:a3}
  var O4 = {b:vals4[0], d:vals4[1], u:vals4[2], a:a4}
  var O5 = {b:vals5[0], d:vals5[1], u:vals5[2], a:a5}
  
 
  // Project opinions to Beta pdfs and compute their product by MC simulation
  var BEx = Opinion2BetaEvidence(Ox)
  var Bx = BetaEvidence2Beta(BEx)
  var BEy = Opinion2BetaEvidence(Oy)
  var By = BetaEvidence2Beta(BEy)
  var BE3 = Opinion2BetaEvidence(O3)
  var B3 = BetaEvidence2Beta(BE3)
  var BE4 = Opinion2BetaEvidence(O4)
  var B4 = BetaEvidence2Beta(BE4)
  var BE5 = Opinion2BetaEvidence(O5)
  var B5 = BetaEvidence2Beta(BE5)
  var BxBy = MC_product(Bx,By,B3,B4,B5)
  var pdf_mc = kde(BxBy)
  
  var Y = logit_MC_product(Bx,By,B3,B4,B5)
  var pdf_logit = kde(Y)
  
  // Compute the empirical moments of the product from the pdfs
  var analyticBxBy = product_Beta_mom(Bx,By)
  var analyticBxByB3 = product_Beta_mom(analyticBxBy,B3)
  var analyticBxByB3B4 = product_Beta_mom(analyticBxByB3,B4)  
  var analyticBeta = product_Beta_mom(analyticBxByB3B4,B5)
  var pdf_beta = Beta({a:analyticBeta.alpha,b:analyticBeta.beta})

  // Integration loop
  var loop_integration = function(){
    var x = sample(Uniform({a:0,b:1}))
    var diff = Math.abs(( Math.exp(pdf_beta.score(x)) - Math.exp( pdf_logit.score(logit(x)))/(x*(1-x)) ))
    return diff
  }
  
  // Compute the integral distance
  var iter_integrations = _.range(N_integrations)  
  var difffernces = map(loop_integration, iter_integrations)
  var mean_difffernces = listMean(difffernces)
  
  print('Simulation number '+i+' - Distance: '+mean_difffernces)
  return mean_difffernces
}

// Compute the average and std deviation of integral distance
var distances = map(loop_experiments,iter_experiments)
var mean_distances = listMean(distances)
var sd_distances = listStdev(distances)

print('Overall Distance: ' + mean_distances + ' +- ' + sd_distances)
