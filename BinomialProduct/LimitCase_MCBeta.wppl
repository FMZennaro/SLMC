
// SUBJECTIVE LOGIC and MCMC
// Case study
// Simulating and comparing Beta approximation and the true distribution (run at http://webppl.org/)

// Global parameters.
var W = 2
var alpha = Vector([1., 1., 1.])
var N_mc = 10000
var N_integrations = 1000

var logit = function(x){
  return Math.log( x / (1-x))
}

// Helper function for converting from opinions to beta pdfs and viceversa
var Opinion2BetaEvidence = function(opinion){
  if (opinion.u==0){ return 'error' }
  else{
    var r = opinion.b*W / opinion.u
    var s = opinion.d*W / opinion.u
    return {r:r,s:s,a:opinion.a}
  }
}  

var BetaEvidence2Beta = function(belief){
  var alpha = belief.r + belief.a*W
  var beta = belief.s + (1-belief.a)*W
  return {alpha:alpha,beta:beta}
}

var MC_product = function(b1,b2){
  var options = {method:'rejection', samples:N_mc}
  return Infer(options, function(){
    var x1 = Beta({a:b1.alpha,b:b1.beta})
    var x2 = Beta({a:b2.alpha,b:b2.beta})
    return sample(x1)*sample(x2) 
  })
}

var logit_MC_product = function(b1,b2){
  var options = {method:'MCMC', samples:N_mc}
  return Infer(options, function(){
    var x1 = Beta({a:b1.alpha,b:b1.beta})
    var x2 = Beta({a:b2.alpha,b:b2.beta})
    var x1x2 = sample(x1)*sample(x2)
    var y = logit(x1x2) 
    return y
  })
}

// Parameters for initializing the opinions
var Ox = {b:0, d:0, u:1, a:.5}
var Oy = {b:0, d:0, u:1, a:.5}

// Project opinions to Beta pdfs and compute their product by MC simulation
var BEx = Opinion2BetaEvidence(Ox)
var Bx = BetaEvidence2Beta(BEx)
var BEy = Opinion2BetaEvidence(Oy)
var By = BetaEvidence2Beta(BEy)
var BxBy = MC_product(Bx,By)
var pdf_mc = kde(BxBy)

var Y = logit_MC_product(Bx,By)
var pdf_logit = kde(Y)

// Compute the empirical moments of the product from the MC simulation
var MC_mean = expectation(BxBy)
var MC_mom2 = expectation(BxBy, function(x){return x*x})
var MC_var = MC_mom2 - (MC_mean*MC_mean)

// Instantiate an approximate Beta pdf
var B_alpha = -(MC_mean * (MC_var + MC_mean*MC_mean - MC_mean)) / (MC_var)
var B_beta = ((MC_mean-1) * (MC_var + MC_mean*MC_mean - MC_mean)) / (MC_var)
var pdf_beta = Beta({a:B_alpha,b:B_beta})

// Integration loop
var loop_integration = function(){
  var x = sample(Uniform({a:0,b:1}))
  var diff = Math.abs(( -Math.log(x) - Math.exp(pdf_beta.score(x)) ))
  return diff
}

// Compute the integral distance
var iter_integrations = _.range(N_integrations)  
var difffernces = map(loop_integration, iter_integrations)
var mean_difffernces = listMean(difffernces)
var sd_difffernces = listStdev(difffernces)
  
print('Overall Distance: ' + mean_difffernces + ' +- ' + sd_difffernces)
