
// SUBJECTIVE LOGIC and MCMC - Quantitative Analysis
// Simulating and comparing SL product and MC simulation (run at http://webppl.org/)

// Global parameters.
var W = 2
var alpha = Vector([1., 1., 1.])
var N_experiments = 100
var N_mc = 500
var N_integrations = 1000

var logit = function(x){
  return Math.log( x / (1-x))
}

// Helper function for converting from opinions to beta pdfs and viceversa
var Opinion2BetaEvidence = function(opinion){
  if (opinion.u==0){ return 'error' }
  else{
    var r = opinion.b*W / opinion.u
    var s = opinion.d*W / opinion.u
    return {r:r,s:s,a:opinion.a}
  }
}  
  
var BetaEvidence2Opinion = function(belief){
  var b = belief.r / (W+belief.r+belief.s)
  var d = belief.s / (W+belief.r+belief.s)
  var u = W / (W+belief.r+belief.s)
  return {b:b,d:d,u:u,a:belief.a}
}

var BetaEvidence2Beta = function(belief){
  var alpha = belief.r + belief.a*W
  var beta = belief.s + (1-belief.a)*W
  return {alpha:alpha,beta:beta}
}

// Functions to compute constrained fusion
var SL_cf = function(o1,o2){
  var a = o1.a
  
  var m_num = (o1.b + o1.u*a)*(o2.b + o2.u*a)
  var m_den = (o1.b + o1.u*a)*(o2.b + o2.u*a) + (1-(o1.b + o1.u*a))*(1-(o2.b + o2.u*a))
  var m = m_num / m_den 

  var sstar1 = 1 / ((o1.b + o1.u*a)*(1-(o1.b + o1.u*a))*((W/o1.u)+1))
  var sstar2 = 1 / ((o2.b + o2.u*a)*(1-(o2.b + o2.u*a))*((W/o2.u)+1))
  var sstar = (1/ (m*(1-m)*(sstar1+sstar2))) -1
  var s0 = Math.max(W*a/m, W*(1-a)/(1-m))
  var s = Math.max(s0,sstar)
  
  var b = (m*s - W*a) / s
  var d = ((1-m)*s - W*(1-a)) / s
  var u = W / a
  
  return {b:b,d:d,u:u,a:a}
}

var MC_cf = function(b1,b2){
  var options = {method:'MCMC', samples:N_mc}
  return Infer(options, function(){
    var x1 = Beta({a:b1.alpha,b:b1.beta})
    var x2 = Beta({a:b2.alpha,b:b2.beta})
    var s1 = sample(x1)
    var s2 = sample(x2)
    return s1*s2 / (s1*s2 + (1-s1)*(1-s2))
  })
}

var logit_MC_cf = function(b1,b2){
  var options = {method:'MCMC', samples:N_mc}
  return Infer(options, function(){
    var x1 = Beta({a:b1.alpha,b:b1.beta})
    var x2 = Beta({a:b2.alpha,b:b2.beta})
    var s1 = sample(x1)
    var s2 = sample(x2)
    return logit(s1*s2 / (s1*s2 + (1-s1)*(1-s2)))
  })
}



// Experimental loop
var iter_experiments = _.range(N_experiments)
var loop_experiments = function(i){

  // Parameters for initializing the opinions
  var vals1 = sample(Dirichlet({alpha:alpha})).data
  var vals2 = sample(Dirichlet({alpha:alpha})).data
  var a1 = sample(Uniform({a:0,b:1}))
  var a2 = a1

  var Ox = {b:vals1[0], d:vals1[1], u:vals1[2], a:a1}
  var Oy = {b:vals2[0], d:vals2[1], u:vals2[2], a:a2}

  // Compute the product of opinions and project to Beta pdf for visualization
  var Oz = SL_cf(Ox,Oy)
  var BEz = Opinion2BetaEvidence(Oz)
  var Bz = BetaEvidence2Beta(BEz)
  var pdf_sl = Beta({a:Bz.alpha,b:Bz.beta})
  
  // Project opinions to Beta pdfs and compute their product by MC simulation
  var BEx = Opinion2BetaEvidence(Ox)
  var Bx = BetaEvidence2Beta(BEx)
  var BEy = Opinion2BetaEvidence(Oy)
  var By = BetaEvidence2Beta(BEy)
  var BxBy = MC_cf(Bx,By)
  var pdf_mc = kde(BxBy)
  
  var Y = logit_MC_cf(Bx,By)
  var pdf_logit = kde(Y)
  
  // Compute the empirical moments of the product from the MC simulation
  var MC_mean = expectation(BxBy)
  var MC_mom2 = expectation(BxBy, function(x){return x*x})
  var MC_var = MC_mom2 - (MC_mean*MC_mean)
  
  // Instantiate an approximate Gaussian pdf
  var pdf_gauss = Gaussian({mu:MC_mean,sigma:Math.sqrt(MC_var)})
    
  // Integration loop
  var loop_integration = function(){
    var x = sample(Uniform({a:0,b:1}))
    var diff = Math.abs(( Math.exp(pdf_gauss.score(x)) - Math.exp( pdf_logit.score(logit(x)))/(x*(1-x)) ))
    return diff
  }
  
  // Compute the integral distance
  var iter_integrations = _.range(N_integrations)  
  var difffernces = map(loop_integration, iter_integrations)
  var mean_difffernces = listMean(difffernces)
  
  print('Simulation number '+i+' - Distance: '+mean_difffernces)
  return mean_difffernces
}

// Compute the average and std deviation of integral distance
var distances = map(loop_experiments,iter_experiments)
var mean_distances = listMean(distances)
var sd_distances = listStdev(distances)

print('Overall Distance: ' + mean_distances + ' +- ' + sd_distances)
